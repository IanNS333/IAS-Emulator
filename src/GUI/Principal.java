/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import ias.emulator.CompilerException;
import ias.emulator.EmuladorIAS;
import ias.emulator.LectorDatos;
import ias.emulator.OverwriteException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ian Neumann
 */
public class Principal extends javax.swing.JFrame {
    static EmuladorIAS emu;
    static File Datos;
    static File instrucciones;
    static DefaultTableModel Memoria;
    static DefaultTableModel Registros;
    static boolean data = false;
    static boolean instr = false;
    static boolean AC = false;
    static boolean MQ = false;
    static boolean PC = false;
    static boolean IR = false;
    static boolean IBR = false;
    static boolean MAR = false;
    static boolean MDR = false;
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        Object[] names = new Object[]{"Address","First Set","Second Set"};
        Registros = (DefaultTableModel)jTable2.getModel();
        Memoria = (DefaultTableModel)jTable1.getModel();
        Memoria.setRowCount(0);
        Memoria.setColumnCount(2);
        Memoria.setColumnIdentifiers(names);
        /*for(int i = 0; i < 4096;i++){
            model.addRow(new Object[]{Integer.toHexString(i)});
        }*/
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("Texto", "txt"));
        jFileChooser2.setFileFilter(new FileNameExtensionFilter("Texto", "txt"));

        Registros.setRowCount(0);
        Registros.addRow(new Object[]{"AC","00000 00000",false});
        Registros.addRow(new Object[]{"MQ","00000 00000",false});
        Registros.addRow(new Object[]{"PC","000",false});
        Registros.addRow(new Object[]{"IR","00000",false});
        Registros.addRow(new Object[]{"IBR","00000 00000",false});
        Registros.addRow(new Object[]{"MAR","000",false});
        Registros.addRow(new Object[]{"MDR","00000 00000",false});

        /*DefaultTableModel model = new DefaultTableModel(names,4096);
        JTable table = new JTable(model);*/
        
       /* JScrollPane scroll = new JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(model);
        scroll.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        */
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Datos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("(No File)");

        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Instrucciones");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("(No File)");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Inicio de Memoria ");

        jLabel4.setText("Fin de Memoria");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null,  new Boolean(false)},
                {null, null, null},
                {null, null,  new Boolean(false)},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Registro", "Valor", "Dump"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dump"));

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Rango");

        jButton4.setText("Dump");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addGap(67, 67, 67))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jButton1))
                            .addComponent(jButton3)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jButton2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       //En este botón se selecciona y se carga el archivo de datos.
        if(jFileChooser1.showOpenDialog(this)==jFileChooser1.APPROVE_OPTION){
            File selected = jFileChooser1.getSelectedFile();
            Datos = selected;
            jLabel1.setText(selected.getName().substring(0, selected.getName().length()-4));
            data = true;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
  
    private void Reload(int inicio, int fin) throws IndexOutOfBoundsException ,NegativeArraySizeException{
        String[] rango = emu.getMemoriaRango(inicio, fin);
        Memoria.setRowCount(0);
        for (int i=inicio; i<=fin;i++){
            Memoria.addRow(new Object[]{Integer.toHexString(i),rango[i-inicio].substring(0, 5),rango[i-inicio].substring(5,10)}); 
        }
        Registros.setRowCount(0);
        Registros.addRow(new Object[]{"AC",emu.getAcumulator(),AC});
        Registros.addRow(new Object[]{"MQ",emu.getMultiplier(),MQ});
        Registros.addRow(new Object[]{"PC",emu.getProgramCounter(),PC});
        Registros.addRow(new Object[]{"IR",emu.getInstructionRegister(),IR});
        Registros.addRow(new Object[]{"IBR",emu.getInstructionBufferRegister(),IBR});
        Registros.addRow(new Object[]{"MAR",emu.getMAR(),MAR});
        Registros.addRow(new Object[]{"MDR",emu.getMDR(),MDR});
    }
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Se crea un objeto de la clase EmuladorIAS pasandole a su constructor los dos archivos seleccionados.
        //se leen los datos de dichos archivos y se ejecuta el programa
        //al final de la ejecucion se actualiza la memoria y los registros con valores hexadecimales
        
        //muestra un mensaje de error en caso de que no se haya seleccionado ningun archivo
        //o en caso de que no se haya establecido un rango de memoria o dicho rango sea invalido
        
        if(!data||!instr){
            JOptionPane.showMessageDialog(this, "Por favor eliga los archivos de datos e instrucciones", "Error", 1);
        }
        else{     
            if(jTextField1.getText().length() == 0 || jTextField1.getText().length() == 0){
                JOptionPane.showMessageDialog(this, "Por favor seleccione un rango", "Error", 0);
            }
            else{
                emu = new EmuladorIAS(Datos, instrucciones);
                int inicio = 0;
                int fin = 0;
                try {
                    inicio = Integer.parseInt(jTextField1.getText());
                    fin = Integer.parseInt(jTextField2.getText());
                } catch (NumberFormatException e) {
                   
                    JOptionPane.showMessageDialog(this, "Por favor eliga enteros", "Error", 1);
                    
                }
                try{
                    emu.readFiles();
                    emu.run();
                }
                catch(CompilerException e){
                    JOptionPane.showMessageDialog(this, "Error de Compilación", "Error", 0);
                }
                catch(FileNotFoundException e){
                    JOptionPane.showMessageDialog(this, "No se encontró el archivo", "Error",0);
                } catch (OverwriteException ex) {
                    JOptionPane.showMessageDialog(this, "Se intento sobre escribir un lugar de memoria al momento de leer los archivos", "Error",0);
                }
                try{
                    Reload(inicio,fin);
                    
                }
                catch(IndexOutOfBoundsException e){
                    JOptionPane.showMessageDialog(this, "Por favor eliga un rango entre 0 y 4095","Error",0);
                }
                catch(NegativeArraySizeException e){
                    JOptionPane.showMessageDialog(this, "Por favor eliga un inicio menor al fin","Error",0);
                }

                Registros.setRowCount(0);
                Registros.addRow(new Object[]{"AC",emu.getAcumulator(),AC});
                Registros.addRow(new Object[]{"MQ",emu.getMultiplier(),MQ});
                Registros.addRow(new Object[]{"PC",emu.getProgramCounter(),PC});
                Registros.addRow(new Object[]{"IR",emu.getInstructionRegister(),IR});
                Registros.addRow(new Object[]{"IBR",emu.getInstructionBufferRegister(),IBR});
                Registros.addRow(new Object[]{"MAR",emu.getMAR(),MAR});
                Registros.addRow(new Object[]{"MDR",emu.getMDR(),MDR});
            
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //En este botón se selecciona y se cara el archivo de instrucciones.
        if(jFileChooser2.showOpenDialog(this)==jFileChooser2.APPROVE_OPTION){
            File selected = jFileChooser2.getSelectedFile();
            instrucciones = selected;
            jLabel2.setText(selected.getName().substring(0, selected.getName().length()-4));
            instr = true;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(jTextField3.getText().length()*jTextField4.getText().length() == 0){
            JOptionPane.showMessageDialog(this,"Por favor seleccione un rango", "Error", 0);
            AC = (boolean)(Registros.getValueAt(0, 2));
            MQ = (boolean)(Registros.getValueAt(1, 2));
            PC = (boolean)(Registros.getValueAt(2, 2));
            IR = (boolean)(Registros.getValueAt(3, 2));
            IBR = (boolean)(Registros.getValueAt(4, 2));
            MAR = (boolean)(Registros.getValueAt(5, 2));
            MDR = (boolean)(Registros.getValueAt(6, 2));
            
            if(emu == null){
                JOptionPane.showMessageDialog(this, "No se ha inicializado la memoria", "Error", 1);
            }
            else{
                emu.dumpRegisters(AC, MQ, PC, IR, IBR, MAR, MDR);
            }
            
            Registros.setRowCount(0);
            Registros.addRow(new Object[]{"AC",emu.getAcumulator(),AC});
            Registros.addRow(new Object[]{"MQ",emu.getMultiplier(),MQ});
            Registros.addRow(new Object[]{"PC",emu.getProgramCounter(),PC});
            Registros.addRow(new Object[]{"IR",emu.getInstructionRegister(),IR});
            Registros.addRow(new Object[]{"IBR",emu.getInstructionBufferRegister(),IBR});
            Registros.addRow(new Object[]{"MAR",emu.getMAR(),MAR});
            Registros.addRow(new Object[]{"MDR",emu.getMDR(),MDR});
            
        }
        else{
            AC = (boolean)(Registros.getValueAt(0, 2));
            MQ = (boolean)(Registros.getValueAt(1, 2));
            PC = (boolean)(Registros.getValueAt(2, 2));
            IR = (boolean)(Registros.getValueAt(3, 2));
            IBR = (boolean)(Registros.getValueAt(4, 2));
            MAR = (boolean)(Registros.getValueAt(5, 2));
            MDR = (boolean)(Registros.getValueAt(6, 2));
            if(emu == null){
                JOptionPane.showMessageDialog(this, "No se ha inicializado la memoria", "Error", 1);
            }
            else{
                emu.dumpRegisters(AC, MQ, PC, IR, IBR, MAR, MDR);
                emu.dumpMemory(Integer.parseInt(jTextField3.getText()),Integer.parseInt(jTextField4.getText()));
            }
            try{
                Reload(Integer.parseInt(jTextField1.getText()),Integer.parseInt(jTextField2.getText()));
            }
            catch(IndexOutOfBoundsException | NegativeArraySizeException | NumberFormatException e){
                JOptionPane.showMessageDialog(this, "El rango de memoria no es valido, no se pudo cargar la memoria","Error",0);
            }
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
